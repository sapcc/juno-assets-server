platform: linux

image_resource:
  type: docker-image
  source:
    # we use our own base image which contains all the necessary tools
    repository: keppel.eu-de-1.cloud.sap/ccloud/juno-assets-server-ci-helper
    tag: "latest"

inputs:
  # whre new apps and libs are located
  - name: pending_assets
  - name: final_data
outputs:
  # where the importmap, manifest and externals are written to
  - name: test_data

params:

# description of the algorithmus:
# 1. build the libs
# 2. copy the libs to the pending_assets folder
# 3. generate the importmap and manifest only for pending apps and libs
#    (write them to test_data)
# 4. generate the externals esm packages (write them to test_data)
run:
  path: /bin/bash
  args:
    - -c
    - |

      # MERGE libs from final build and pending_assets
      mkdir -p /tmp/pending_assets && cp -r pending_assets/* /tmp/pending_assets

      # it is possible that some apps are using the libs and we need to have them in the same folder
      # it is also possible that new libs are in pending assets
      # so we need to copy this libs first to test_data
      # the folder name is name@version
      if [ -d "/tmp/pending_assets/libs" ]; then
        package_json_files=$(find /tmp/pending_assets/libs -type f -name package.json)
        if [ -n "$package_json_files" ]; then
          for f in package_json_files; do
            name=$(jq -r '.name' $f)
            version=$(jq -r '.version' $f)
            mkdir -p ./test_data/libs/"${name}@${version}
            mkdir -p ./test_data/libs/"${name}@latest

            cp -r $(dirname $f) ./test_data/libs/"${name}@${version}/
            cp -r $(dirname $f) ./test_data/libs/"${name}@latest/
          done
        fi
        # remove the libs folder from pending_assets
        rm -rf /tmp/pending_assets/libs
      fi
      # copy the rest of the pending_assets to test_data
      cp -r /tmp/pending_assets/* ./test_data/

      # copy libs from final build to test_data
      for l in final_data/libs/*; do
        name=$(basename $l)
        if [ -d "./test_data/libs/${name}" ]; then continue; fi
        cp -r $l ./test_data/libs/${name}
      done
      # DONE  

      # Generate importmap and manifest only for pending apps and libs
      # this step also generates the externals esm packages
      node /ci/scripts/esm_build/generate_importmap.mjs \
      --node-modules-path=/tmp/ \
      --external-path=./externals \
      --exit-on-error=false \
      --src=./ \
      --base-url="http://localhost:3000" \
      --ignore-externals=false \
      --importmap-path=./importmap.json  \
      --verbose=false 

      node /ci/scripts/generate_manifest.mjs \
      --src=./ \
      --output=./manifest.json \
      --base-url="http://localhost:3000" \
      --verbose=false
