platform: linux

image_resource:
  type: docker-image
  source:
    repository: keppel.eu-de-1.cloud.sap/ccloud/juno-assets-server-ci-helper
    tag: "latest"

inputs:
  - name: input
  - name: meta
outputs:
  - name: output # where do you want to download

params:

# describe the code
# 1. check if the name, version and repository are set in the package.json file
# 2. check if the file defined in main or module exists
run:
  path: /bin/bash
  args:
    - -c
    - |
      source /ci/scripts/logger.sh

      # generate build url 
      cd meta 
      BUILD_URL="$(cat atc-external-url)/teams/$(cat build-team-name)/pipelines/$(cat build-pipeline-name)/jobs/$(cat build-job-name)/builds/$(cat build-name)" 
      cd ..

      # create the build-log file 

      package_json_files=$(find ./input -type f -name package.json)
      for f in $package_json_files; do
        ERROR=""
        PASSED=true
        NAME=$(basename $(dirname $f))
        TYPE=$(basename $(dirname $(dirname $f)))
        VERSION=""
        msg_info "found $NAME in $TYPE, checking..."
        
        if [ "$TYPE" != "libs" ] && [ "$TYPE" != "apps" ]; then
          msg_error "parent folder should be apps or libs, found $TYPE"
          ERROR="${ERROR} $invalid parent folder $TYPE,"
          PASSED=false
        fi

        # loop over keys name, repository and version
        for key in name version repository; do
          echo -ne "${BLUE}  $key ${NC}"
          VALUE=$(jq -r ".$key" $f)
          if [ "$key" == "version" ]; then
            VERSION=$VALUE
          fi
          # get the value of the key
          # in one line

          if [ "$VALUE" == "null" ]; then
            msg_error "missing"
            ERROR="${ERROR} $key is missing,"
            PASSED=false
          else 
            msg_success " ${VALUE}"
          fi
        done
        
        if [ $TYPE == "libs" ]; then
          msg_info "  main file ${GREEN}not applicable"
          continue
        fi

        MAIN=$(jq -r ".main" $f)

        if [ "$MAIN" == "null" ]; then 
          MAIN=$(jq -r ".module" $f)
          if [ "$MAIN" == "null" ] || [ ! -f "./input/$TYPE/$NAME/$MAIN" ]; then
            msg_info "  main file ${RED}missing ($MAIN, did you forget to bundle?)"
            ERROR="${ERROR} main file is missing ($MAIN, did you forget to bundle?),"
            PASSED=false
          else
            msg_info "  main file ${GREEN}$MAIN"  
          fi  
        fi  

        if $PASSED; then 
          msg_success "  PASSED"
          mkdir -p ./output/$TYPE/$NAME && cp -r $(dirname $f)/* ./output/$TYPE/$NAME/
        else 
          msg_error "  FAILED"
        fi

        /ci/scripts/build_log.sh log --file output/build-log.sh --name $NAME --type $TYPE --version $VERSION --pased $PASSED --build-url $BUILD_URL --check integrity --error $ERROR
      done

      exit 0
