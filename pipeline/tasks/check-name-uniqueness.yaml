platform: linux

image_resource:
  type: docker-image
  source:
    repository: keppel.eu-de-1.cloud.sap/ccloud/juno-assets-server-ci-helper
    tag: "latest"

inputs:
  - name: assets
  - name: final_data
  - name: meta
outputs:
  - name: passed

params:

# describe the code
# 1. check if the name, version and repository are set in the package.json file
# 2. check if the file defined in main or module exists
run:
  path: /bin/bash
  args:
    - -c
    - |
      # 1. if manifest.json is not present, then the asset is new (SUCCESS)
      # 2. if the name is not present in manifest.json, then the asset is new (SUCCESS)
      # 3. if the name is present in manifest.json AND the repository is different, THEN it is not allowed to be published (FAILURE)
      # 4. if the name is present in manifest.json AND the repository is the same AND the version is higher, THEN it is an update (SUCCESS)
      # 5. if the name is present in manifest.json AND the repository is the same AND the version is the same, THEN it is not allowed to be published (FAILURE)

      source /ci/scripts/logger.sh

      # if file assets/build-log.json exists, then copy it to passed/build-log.json
      if [ -f assets/build-log.json ]; then
        cp assets/build-log.json passed/build-log.json
      fi

      # generate build url 
      cd meta 
      BUILD_URL="$(cat atc-external-url)/teams/$(cat build-team-name)/pipelines/$(cat build-pipeline-name)/jobs/$(cat build-job-name)/builds/$(cat build-name)" 
      cd ..

      # 1. check
      if [ ! -f final_data/manifest.json ]; then
        # initial state
        msg_success "manifest.json is not present, assets are new"
        cp -r assets/* passed/
        exit 0
      fi

      package_json_files=$(find ./assets -type f -name package.json)
      for f in $package_json_files; do
        unset ERROR
        NAME=$(jq -r '.name' $f)
        REPOSITORY=$(jq -r '.repository' $f)
        VERSION=$(jq -r '.version' $f)
        TYPE_FOLDER=$(basename $(dirname $(dirname $f)))
        msg_info "$NAME:"
        msg_info "  repository ${GREEN}$REPOSITORY"
        msg_info "  version ${GREEN}$VERSION"
        msg_default "  checking..."

        
        # 2. check 
        if [ $(jq "has(\"$NAME\")" final_data/manifest.json) == "false" ] && [ $(jq "._global | has(\"$NAME\")" final_data/manifest.json)  ]; then
          # initial state
          msg_success "  name is not present in manifest.json, asset is new"
        else
          # app is already in the manifest (not new)
          package_data=$(jq ".\"$NAME\"" final_data/manifest.json)
          if [ "$package_data" == "null" ]; then
            package_data=$(jq "._global.\"$NAME\"" final_data/manifest.json)
          fi 
          
          # 3. check
          versions=$(echo $package_data | jq -r '.[] | .version')
          sorted_versions=$(echo "$versions" | tr ' ' '\n' | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n | tr '\n' ' ')
          latest_version=$(echo "$sorted_versions" | awk '{print $NF}')
          latest_package=$(echo $package_data | jq -r "[.[] | select(.version == \"$latest_version\")][0]")

          LATEST_REPOSITORY=$(echo $latest_package | jq -r '.repository')
          LATEST_VERSION=$(echo $latest_package | jq -r '.version')

          if [ "$REPOSITORY" != "$LATEST_REPOSITORY" ]; then
            ERROR="repository is different, asset is not allowed to be published"
            msg_error "  $ERROR"
          else
            # repository is the same 

            # 4. check
            latest_current="$LATEST_VERSION $VERSION"
            max_version=$( echo $latest_current | tr ' ' '\n' | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n | tr '\n' ' ' | awk '{print $NF}')
            
            if [ "$VERSION" != "$LATEST_VERSION" ] && [ "$max_version" == "$VERSION" ] ; then
              msg_success "  version is higher, asset is an update"
            elif [ "$VERSION" == "$LATEST_VERSION" ]; then
              # 5. check
              ERROR="version is the same, asset is not allowed to be published"
              msg_error "  $ERROR"
            else  
              ERROR="version is not higher, asset is not allowed to be published"
              msg_error "  $ERROR"
            fi        
          fi  
        fi  
        if [ -z "$ERROR" ]; then
          PASSED=true
          mkdir -p passed/$TYPE_FOLDER/$NAME && cp -r $(dirname $f)/* passed/$TYPE_FOLDER/$NAME/
        else
          PASSED=false
        fi
        
        # Update build log
        /ci/scripts/build_log.sh log --file passed/build-log.json --name $NAME --type $TYPE_FOLDER --version $VERSION --passed $PASSED --check "name uniqueness" --build-url $BUILD_URL --error "$ERROR"
      done

      exit 0
