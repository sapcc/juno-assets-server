platform: linux

image_resource:
  type: docker-image
  source:
    # we use our own base image which contains all the necessary tools
    repository: keppel.eu-de-1.cloud.sap/ccloud/juno-assets-server-ci-helper
    tag: "latest"

inputs:
  # whre new apps and libs are located
  - name: assets
  - name: final_data
outputs:
  # where the importmap, manifest and externals are written to
  - name: data

params:

# description of the algorithmus:
# 1. build the libs
# 2. copy the libs to the pending_assets folder
# 3. generate the importmap and manifest only for pending apps and libs
#    (write them to test_data)
# 4. generate the externals esm packages (write them to test_data)
run:
  path: /bin/bash
  args:
    - -c
    - |

      # copy current final data like externals, apps and libs to the data folder   
      cp -r final_data/* ./data/
      cp -r assets/build-log.json ./data/
      # do it once
      rm -rf data/externals/npm:*

      # copy passed assets to data (overwrite if exist and update latest). 
      for PACKAGE in assets/**/*/package.json; do
        NAME=$(jq -r .name $PACKAGE)
        VERSION=$(jq -r .version $PACKAGE)
        # dir is something like ./libs/juno-ui-components@1.1.5
        DIR=$(dirname $PACKAGE)
        # asset path is then ./libs
        ASSET_PATH=$(dirname $DIR)
        rm -rf data/$DIR
        rm -rf data/$ASSET_PATH/$NAME@$VERSION
        rm -rf data/$ASSET_PATH/$NAME@latest
        mkdir -p data/$ASSET_PATH/$NAME@$VERSION 
        cp -r $DIR/* data/$ASSET_PATH/$NAME@$VERSION/
        mkdir -p data/$ASSET_PATH/$NAME@latest
        cp -r $DIR/* data/$ASSET_PATH/$NAME@latest/
      done

      cd data
      # Generate importmap and manifest only for pending apps and libs
      # this step also generates the externals esm packages
      node /ci/scripts/esm_build/generate_importmap.mjs \
      --node-modules-path=/tmp/ \
      --external-path=./externals \
      --exit-on-error=false \
      --src=./ \
      --base-url="http://localhost:3000" \
      --ignore-externals=false \
      --importmap-path=./importmap.json  \
      --verbose=false ; \
      \
      node /ci/scripts/generate_manifest.mjs \
      --src=./ \
      --output=./manifest.json \
      --base-url="http://localhost:3000" \
      --assets-build-log=./build-log.json \
      --verbose=false
