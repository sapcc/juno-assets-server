platform: linux

image_resource:
  type: docker-image
  source:
    # we use our own base image which contains all the necessary tools
    repository: keppel.eu-de-1.cloud.sap/ccloud/juno-assets-server-ci-helper
    tag: "latest"

inputs:
  # whre new apps and libs are located
  - name: assets
  - name: final_data
  - name: juno-assets-server.git
outputs:
  # where the importmap, manifest and externals are written to
  - name: data

params:

# description of the algorithmus:
# 1. build the libs
# 2. copy the libs to the pending_assets folder
# 3. generate the importmap and manifest only for pending apps and libs
#    (write them to test_data)
# 4. generate the externals esm packages (write them to test_data)
run:
  path: /bin/bash
  args:
    - -c
    - |

      WORKDIR=$(pwd) 
      mkdir -p /tmp/data
      # copy current final data like externals, apps and libs to the data folder   
      cp -r final_data/* /tmp/data/
      cp -r assets/build-log.json /tmp/data/

      # delete externals 
      # TODO: remove it later
      rm -rf /tmp/data/externals

      mkdir -p /tmp/data/global && cp -r juno-assets-server.git/README.md /tmp/data/global/

      package_json_files=$(find $WORKDIR/assets/ -name package.json) 
      # copy passed assets to data (overwrite if exist and update latest). 
      for PACKAGE in $package_json_files; do
        NAME=$(jq -r .name $PACKAGE)
        VERSION=$(jq -r .version $PACKAGE)
        # dir is something like ./libs/juno-ui-components@1.1.5
        DIR=$(dirname $PACKAGE)
        # asset path is then ./libs
        ASSET_PATH=$(dirname $DIR)
        rm -rf /tmp/data/$DIR
        rm -rf /tmp/data/$ASSET_PATH/$NAME@$VERSION
        rm -rf /tmp/data/$ASSET_PATH/$NAME@latest
        mkdir -p /tmp/data/$ASSET_PATH/$NAME@$VERSION 
        cp -r $DIR/* /tmp/data/$ASSET_PATH/$NAME@$VERSION/
        mkdir -p /tmp/data/$ASSET_PATH/$NAME@latest
        cp -r $DIR/* /tmp/data/$ASSET_PATH/$NAME@latest/
      done

      cd /tmp/data

      # Performance boost:
      # only if any package.json file exists in the assets folder 
      if [ -n "$package_json_files" ]; then
        # do it once
        # rm -rf /tmp/data/externals/npm:*

        # Generate importmap and manifest only for pending apps and libs
        # this step also generates the externals esm packages
        node /ci/scripts/esm_build/generate_importmap.mjs \
        --node-modules-path=/tmp/ \
        --external-path=./externals \
        --exit-on-error=false \
        --src=./ \
        --base-url="%BASE_URL%" \
        --ignore-externals=false \
        --importmap-path=./importmap.json  \
        --verbose=false ; \
        \
        node /ci/scripts/generate_manifest.mjs \
        --src=./ \
        --output=./manifest.json \
        --base-url="%BASE_URL%" \
        --assets-build-log=./build-log.json \
        --verbose=false
      fi

      # Performance boost:
      # consider only the pending apps and libs
      # coppy all generated files in /tmp/data to data and remove apps and libs
      cp /tmp/data/importmap.json $WORKDIR/data/
      cp /tmp/data/manifest.json $WORKDIR/data/
      # copy apps and libs from assets to data
      cp -r $WORKDIR/assets/apps $WORKDIR/assets/libs $WORKDIR/data/ &>/dev/null || true
