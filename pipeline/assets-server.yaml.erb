# prettier-ignore
<%
  # High Availability Regions
  HA_REGIONS = [
    "eu-de-1",
    "eu-de-2",
    "eu-nl-1",
    "ap-ae-1",
    "ap-jp-2",
    "ap-au-1",
    "la-br-1",
    "na-us-1",
    "na-us-2"
  ]
%>

resources:
  - name: swift-juno-pending-assets.version
    type: http-resource
    source:
      url: https://objectstore-3.eu-de-1.cloud.sap:443/v1/AUTH_caa6209d2c38450f8266311fd0f05446/juno-pending-assets
      method: HEAD
      version: 
        header: x-container-bytes-used

  - name: swift-juno-final-assets.version
    type: http-resource
    source:
      url: https://objectstore-3.eu-de-1.cloud.sap:443/v1/AUTH_caa6209d2c38450f8266311fd0f05446/juno-final-assets
      method: HEAD
      version: 
        header: x-container-bytes-used        

  - name: juno-assets-server.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno-assets-server.git
      branch: main
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))


  - name: assets-server.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: "juno-assets-server-version" } # disambiguate from other time-version resources

  # meta is used to store/access metadata about the build
  - name: meta
    type: meta

  - name: assets-server.image
    type: docker-image
    icon: docker
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v4-assets-server    

# algorithm: 
# 1. download all pending assets from swift
# 2. validate the assets
# 3. build the assets-server image
# 4. deploy the assets-server to s-qa-de-1 and s-qa-de-2
# 5. run e2e tests on s-qa-de-1
# 6. promote the assets-server to prod
# 7. deploy the assets-server to all HA regions
# 8. run e2e tests on all HA regions
groups: 
  - name: assets-server 
    jobs:
      - validate-pending-assets
      - build-assets-server-image
      - deploy-assets-server-to-s-qa-de-1
      - deploy-assets-server-to-qa-de-2
      - e2e-tests-assets-server-s-qa-de-1
      - promote-prod-assets-server
      <%HA_REGIONS.each do |region|%>
      - deploy-assets-server-to-<%= region %>
      - e2e-tests-assets-server-<%= region %>
      <% end %> 

jobs:
  - name: validate-pending-assets
    plan:
      - get: juno-assets-server.git
      - get: meta  
      - get: swift-juno-pending-assets.version
        trigger: true 

      - task: download-from-juno-pending-assets
        file: juno-assets-server.git/pipeline/tasks/swift-download.yaml
        output_mapping:
          output: pending_assets
        params:
          CONTAINER: "juno-pending-assets"
          DELETE_AFTER_DOWNLOAD: "true"

      - task: check-integrity 
        file: juno-assets-server.git/pipeline/tasks/check-integrity.yaml
        input_mapping:
          input: pending_assets
          meta: meta
        output_mapping:
          output: passed_check_integrity

      - task: download-from-juno-final-assets
        file: juno-assets-server.git/pipeline/tasks/swift-download.yaml
        output_mapping:
          output: final_assets_data
        params:
          CONTAINER: "juno-final-assets"

      - task: check-name-uniqueness
        file: juno-assets-server.git/pipeline/tasks/check-name-uniqueness.yaml
        input_mapping:
          final_data: final_assets_data
          meta: meta
          assets: passed_check_integrity
        output_mapping:
          passed: passed_check_uniqueness

      - task: generate-data-for-mount-test
        file: juno-assets-server.git/pipeline/tasks/generate-test-data.yaml
        input_mapping:
          pending_assets: passed_check_uniqueness
          final_data: final_assets_data
        output_mapping:
          test_data: test_data

      - task: check-asset-mountable
        file: juno-assets-server.git/pipeline/tasks/check-asset-mountable.yaml
        input_mapping:
          assets: passed_check_uniqueness
          test_data: test_data
          meta: meta
          juno-assets-server.git: juno-assets-server.git
        output_mapping:
          passed: passed_check_asset_mountable
          test_results: test_results

      - task: upload-ui-test-result
        file: juno-assets-server.git/pipeline/tasks/swift-upload.yaml
        input_mapping:
          input: test_results
        params:
          CONTAINER: cypress
          TARGET: juno/pending-assets-tests

      - task: generate-final-data
        file: juno-assets-server.git/pipeline/tasks/generate-final-data.yaml
        input_mapping:
          assets: passed_check_asset_mountable
          final_data: final_assets_data
        output_mapping:
          data: final_data

      - task: upload-to-final
        file: juno-assets-server.git/pipeline/tasks/swift-upload.yaml
        input_mapping:
          input: final_data
        params:
          CONTAINER: "juno-final-assets"

      - task: exit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/node
              tag: "18-alpine"   
          run:
            path: /bin/sh
            args:
              - -c
              - |
                exit 0

  - name: build-assets-server-image
    plan:
      - get: juno-assets-server.git
      - get: meta  
        passed: [validate-pending-assets]
      - get: swift-juno-final-assets.version
        trigger: true
      - put: assets-server.version
      
      - task: download-all-final-assets
        file: juno-assets-server.git/pipeline/tasks/swift-download.yaml
        output_mapping:
          output: final_assets
        params:
          CONTAINER: "juno-final-assets"

      - task: prepare-build-context
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          inputs:
            - name: final_assets
            - name: juno-assets-server.git
          outputs:
            - name: build_context    
          run:
            path: /bin/sh
            args:
              - -c
              - |
                # exit on error
                set -e
                mkdir -p build_context/assets && cp -r final_assets/* build_context/assets/
                mkdir -p build_context/templates && cp -r juno-assets-server.git/templates/* build_context/templates/
                exit 0
                
      - put: assets-server.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          # root for docker build, its using the output dir from the step before
          build: build_context
          dockerfile: juno-assets-server.git/docker/Dockerfile.assets.server
          tag: assets-server.version/version
        get_params:
          skip_download: true

  - name: deploy-assets-server-to-s-qa-de-1
    plan:
    - get: juno-assets-server.git
      trigger: true
      passed: [build-assets-server-image]
  - name: deploy-assets-server-to-qa-de-2
    plan:
      - get: juno-assets-server.git
        trigger: true  
        passed: [build-assets-server-image]
  - name: e2e-tests-assets-server-s-qa-de-1
    plan:
      - get: juno-assets-server.git
        trigger: true  
        passed: [deploy-assets-server-to-s-qa-de-1]
  - name: promote-prod-assets-server
    plan:
      - get: juno-assets-server.git
        trigger: false  
        passed: [e2e-tests-assets-server-s-qa-de-1]
  <%HA_REGIONS.each do |region|%>
  - name: deploy-assets-server-to-<%= region %>
    plan:
      - get: juno-assets-server.git
        trigger: true  
        passed: [promote-prod-assets-server]
  - name: e2e-tests-assets-server-<%= region %>
    plan:
      - get: juno-assets-server.git
        trigger: true  
        passed: [deploy-assets-server-to-<%= region %>]
  <% end %>  